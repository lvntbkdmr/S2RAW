#!/usr/bin/env bash

# for translating band or detector input selection argument into a sorted list of IDs
function append_id() {
	local curlist="$1"
	local addlist="$2"
	local max="$3"

	(
		echo "$curlist"
		IFS=","; for item in $addlist; do
			IFS=$' \t\n'
			if [ "${item//-}" != "$item" ]; then
				start="${item%-*}"; if [ -z "$start" ]; then start=1; fi; 
				stop="${item#*-}"; if [ -z "$stop" ]; then stop=$max; fi
			elif [ -n "$item" ]; then
				start="$item"
				stop="$start"
			fi

			if [ $(( $start + 0 )) != "$start" ] || [ $(( $stop + 0 )) != "$stop" ] \
			|| [ $start -gt $stop ] || [ $start -lt 1 ] || [ $stop -gt $max ]; then 
				echo "Invalid Detector or Band selection list \"$item\"">&2
				exit 1
			fi
			for (( i=$start; i<=$stop; i++ )); do echo $i ; done
		done
	) | sort -nu
	return ${PIPESTATUS[0]}
		
}

function usage
{
	echo
	echo "Usage:" `basename "$0"` "<target-def-file> <pointing-file> [ options ] <isp1> <isp2> ..."
	echo "Options:"
	echo "  -o <out-dir>"
	echo "  -m <num-processes>"
	echo "  -b <band-list> (defaulting to 1-3,7)"
	echo "  -d <detector-list> (defaulting to all detectors 1-12)"
	exit 1
} >&2

if [ $# -lt 3 ]; then
        usage
fi

target_file="$1"
if [ ! -f "$target_file" ]; then
	echo "invalid pointing file '"$target_file"'" >&2
	usage
fi

pointing_file="$2"
if [ ! -f "$pointing_file" ]; then
	echo "invalid pointing file '"$pointing_file"'" >&2
	usage
fi

shift 2

out_dir="."
declare -i num_proc=1
detectors=""
bands=""


while getopts "o:m:b:d:" opt; do
case $opt in
o) out_dir="$OPTARG";;
m) num_proc="$OPTARG";;
b) bands=`append_id "$bands" "$OPTARG" 13`;;
d) detectors=`append_id "$detectors" "$OPTARG" 12`;;
esac
done

shift $(($OPTIND - 1))

[ -z "$detectors" ] && detectors="1 2 3 4 5 6 7 8 9 10 11 12"
[ -z "$bands" ] && bands="1 2 3 7"

if [ -n "$out_dir" ] && [ ! -d "$out_dir" ]; then
	echo "invalid output directory '"$out_dir"'" >&2
	usage
fi


while [ $# -gt 0 ]; do
	if [ "$1" == "-" ]; then
		cat
	elif [ -d "$1" ]; then
		for b in $bands; do for d in $detectors; do
			find "$1" -type f -name `printf "*.B%.2dD%.2d.*.bin" $b $d` -print
		done; done
	else
		echo "$1"
	fi
	shift
done | (
declare -i proc_idx=0
unset CQFD_AUXFILE_PATH
while read file; do

	recread "$file"'&dd=/L0/ISP/MSI/Scene_buffer&isp_type=ISP&scene_type=apid' \
		-D"$target_file" -u="$CQFD_DICTIONARY_PATH/S2RAWGEO/TARGET" \
		-aux S2RAWGEO='"'"$pointing_file"'"'  \
		-B"$out_dir/" 'dots=strcount(#filename,"."); ext=words(#filename,".",dots-1,dots); prefix=dots>=3?words(#filename,".",0,dots-3)<<".":""; TARGET_SCENE_IDS@DIM?prefix<<TARGET_SCENE_IDS[0]<<"_"<<TARGET_SCENE_IDS[TARGET_SCENE_IDS@DIM-1]<<"."<<ext:null' \
		TARGET_SCENES &

	proc_idx=$(( $proc_idx + 1 ))

	[ $num_proc -ne 0 ] && [ $(( $proc_idx % $num_proc )) -eq 0 ] && wait
done
wait
)
