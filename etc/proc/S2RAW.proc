// Description:
//	Input parameters:
//	- Time queries supported via -sensing_start, -sensing_stop
//	- Optional target formatted as a semincolon separated string of target name, longitude, latitude, and optionan target extension in kilometers

//	Output:
//	- Browse image	<product-name>.jpg
//
//	Return Status:
//	- (0)  on success
//	- (-1) (255) on error
//
//	Processing performed:
//	Generates a browse image 
//
//	
// 	name of processor:


	proc="L0QL";
	proc_version="1.0";
	proc_time=datestr(datenum(null))ISO;


// Input Parameters

//	nlin_corr=option("nlin_corr",0);
	
	// target parameters
	target=option("target",null);
	dont_target=isnullstr(target);
	target_lon=words(target,";",1)+0;
	target_lat=words(target,";",2)+0;
	target_name=words(target,";",0);

	target_ext_default=option("target_ext",5);
	target_ext=words(target,";",3);
	target_ext=isnullstr(target_ext)?target_ext_default:target_ext+0;

	// coregistration accuracy (in numer of 10m lines)
	coreg_prec=option("coreg_prec",32);

	datatake=option("datatake",words(filename,".",0));
	sat_unit=option("sat_unit",datatake[2,2]);

	orbit=option("orbit",strfind(filename,".ORB-")>=0?words(filename[strfind(filename,".ORB-")+5],".",0)+0:-1);

	msi_mode=option("msi_mode",strfind(filename,".INS-")>=0?words(filename[strfind(filename,".INS-")+1],".",0):"INS-ERR");

	nuc_table_id=option("nuctid",strfind(filename,".NUC-")>=0?words(filename[strfind(filename,".NUC-")+5],".",0)+0:-1);
	nuc_applied=isnumber(nuc_table_id);

	downlink=option("downlink",words(filename,".",strcount(filename,".")));


// define constants
	// vernal equinox on 2000-03-20 at 7:25 UTC

	earth_rotation=2*pi/(24*3600); // in rad/s

	vernal_equinox=datenum("20-MAR-2000 07:25:00",2000);
	tropical_year=365.242190;
	ecliptic_angle=23.5;

	earth_radius=6363885;

// Band definitions

	band_num=vector() [1,2,3];
	num_bands=band_num@size(1);

// Input image dimensions
	image_idx=vector(num_bands,12) [{.IMAGE_FOLDER.IMAGE_DATA}@lookup($2*12+band_num[$1],"(detector_id-1)*12+band_num")] [$0<0?0:$0];
	image_dim=vector(num_bands,12,2) [choose($3,0,
		.IMAGE_FOLDER.IMAGE_DATA[image_idx[$1,$2]]LUM.num_lines,
		.IMAGE_FOLDER.IMAGE_DATA[image_idx[$1,$2]]LUM.num_pixels)
	];


	num_det_pixels_fr={BAND.band_id=B2.num_det_pixels_fr}; // 2548 for 10m bands
	num_det_pixels={BAND.band_id=B2.num_det_pixels}; // 324 for the quick look out of decompression
	num_det_pixels=num_det_pixels?num_det_pixels:324;

	sampling=const(2^ceil(log({BAND.band_id=B2.num_det_pixels_fr}/{BAND.band_id=B2.num_det_pixels})/log(2))); // 8

	// the number of void pixels at the beginning and end of a line (this happens both for quicklook and for full-resolution)
        void_col_offset=((num_det_pixels-floor(num_det_pixels_fr/sampling))/2);

        // accordingly adjust num_det_pixels to equal the number of complete groups of 'sampling' full resolution pixels
        num_det_pixels=num_det_pixels-2*void_col_offset;
        num_det_pixels_fr=num_det_pixels*sampling;

// GIPP VIEWDIR processing to derive image pixel association to detector image space 
	// moved externally (e.g. PIXSELECT.proc, no_overlap, etc)

// coarse registration offsets
	// moved externally (e.g. coreg_coarse, coreg_fine, etc) 

	bands_coreg_loffset=vector(num_bands,12) [coreg_loffset[band_num[$1],$2]];
	corr_coreg_loffset=-min(0,bands_coreg_loffset);

	data_loffset=vector(num_bands,12) [image_dim[$1,$2,0]==0?nan:(
		(bands_coreg_loffset[$1,$2]+corr_coreg_loffset)/sampling
		+ceil(LINE_TIME@maxlookup(BAND[BAND@lookup(band_num[$1],"band_num")]first_scene[$2])/tpdf-num_margin_scenes)*16*144/sampling
	)];

	canvas_loffset=min(data_loffset);


// input data

	pixel=vector(num_bands,12) [
		raster(
			"BAND.band_num="<<band_num[$1]<<".image_data."<<$2,"",
			// apply line coregistration offset,detector/image offset and reverse reading for odd detectors
			1,($2%2?-1:1),
			data_loffset[$1,$2],
			(det_pix1_canvas_fr[$2]-det_pix_range_fr[$2,0]+($2%2?num_det_pixels_fr-1:0))/sampling-($2%2?-1:1)*void_col_offset
		) @scale(2^11) @buffer(ceil(coreg_prec/sampling))
	];

	data_lmax=vector(num_bands,12) [pixel[$1,$2]@lines+data_loffset[$1,$2]];
	canvas_lmax=max(data_lmax)-1;

	lines_per_tp=16*144/sampling/tpdf;
	pixels_per_tp=({BAND.band_id=B2.num_det_pixels_fr}-1)/(num_tp_cols-1);

	margin_lines=round(lines_per_tp*{tpdf}*({num_margin_scenes}+0));
	sampling_shift=0.5*(1-1/sampling);

	tp_line_offset=corr_coreg_loffset/sampling-margin_lines-sampling_shift;
	even_odd_shift=(coreg_loffset[1,1]-coreg_loffset[1,0])/sampling;

	pos=vector(num_bands,12,2) [
		raster("BAND.band_num="<<band_num[$1]<<".lon",""<<$2,
		   lines_per_tp, pixels_per_tp,tp_line_offset+coreg_loffset[band_num[$1],$2]/sampling, 0
		) @buffer(ceil(coreg_prec/sampling)) @scale(180/pi) @cyclic(-pi,pi),
		raster("BAND.band_num="<<band_num[$1]<<".lat",""<<$2,
		   lines_per_tp, pixels_per_tp,tp_line_offset+coreg_loffset[band_num[$1],$2]/sampling, 0
		) @buffer(ceil(coreg_prec/sampling)) @scale(180/pi)
	];

	sun_el=vector(12) [
		raster("BAND.band_id=B2.sun_el",""<<$1,
		   lines_per_tp, pixels_per_tp,tp_line_offset+coreg_loffset[1,$1]/sampling, 0
		) @scale(180/pi)
	];


// line selector for time and/or geoloc criteria

	// get time interval (defaulting to the complete one)
	sensing_start_param=option("sensing_start","");
	sensing_stop_param=option("sensing_stop","");


	// get the corresponding start/stop line indices
	sensing_start=sensing_start_param==""?nan:datenum(sensing_start_param,2000);
	sensing_stop=sensing_stop_param==""?nan:datenum(sensing_stop_param,2000);

	time_loffset=LINE_TIME@maxlookup(sensing_start,"");
	time_loffset=isnan(sensing_start)?nan:(tp_line_offset+lines_per_tp*(time_loffset-(LINE_TIME[time_loffset]-sensing_start)/(3.6/86400/tpdf)));

	time_lmax=LINE_TIME@minlookup(sensing_stop,"");
	time_lmax=isnan(sensing_stop)?nan:(time_lmax<0?0:(
	   tp_line_offset+lines_per_tp*(time_lmax-(LINE_TIME[time_lmax]-sensing_stop)/(3.6/86400/tpdf)))
	);

	// get line and column interval for geoloc criteria

	target_geo_indices=vector(12,2,2) [0+words(words(option("target_geo_indices",""),";",$1),",",$2*2+$3)];

	target_det_lines=vector(12,2) [target_geo_indices[$1,0,$2]*lines_per_tp+(tp_line_offset+coreg_loffset[1,$1]/sampling)];
	target_loffset=floor(min(target_det_lines));
	target_lmax=ceil(max(target_det_lines));

	target_det_cols=vector(12,2) [(target_geo_indices[$1,1,$2]*pixels_per_tp-det_pix_range_fr[$1,0]+det_pix1_canvas_fr[$1])/sampling];
	target_coffset=floor(min(target_det_cols));
	target_cmax=ceil(max(target_det_cols));

	param_loffset=max(dont_target?nan:target_loffset,time_loffset);
	param_lmax=min(dont_target?nan:target_lmax,time_lmax);

	l=lines(const(isnan(param_loffset)?canvas_loffset:param_loffset),const(isnan(param_lmax)?canvas_lmax:param_lmax));

	// define number of canvas image columns
	// and set canvas column numbers canvas_pix and canvas_pix_fr respectively in sampled and fr pixel units
	canvas_coffset=dont_target||isnan(target_coffset)?0:target_coffset;
	canvas_cmax=dont_target||isnan(target_cmax)?floor(canvas_numpix_fr/sampling)-1:target_cmax;

	canvas_pix=columns(canvas_coffset,canvas_cmax);
	canvas_pix_fr=floor((canvas_pix+.5)*sampling);

	// the detector to which the fr pixel belongs
	det=detector_fr[canvas_pix_fr];
	det_odd=det%2;

	// the detector pixel number in sampled space
	det_pix=round(det_pix_fr[canvas_pix_fr]/sampling-0.5);
	det_pix_reverse=num_det_pixels-det_pix-1;


// line properties

	line_sensing_time=raster("LINE_TIME","",lines_per_tp,1,tp_line_offset,0);
	line_sensing_time=line_sensing_time[l,0]ABS;

	line_sensing_time_str=keep(datestr(line_sensing_time,2000)ISO,canvas_pix@index>0);
	sensing_start_str=keep(line_sensing_time_str,(l!=l@first)||(canvas_pix!=canvas_pix@first));

// geolocation processing

	tp_col=det_pix_fr[canvas_pix_fr];
	tp_col_max=num_det_pixels_fr-1;

	lon=vector(12) [pos[0,$1,0][l,tp_col]ABS]; lon=lon[det]; lon_deg=lon*180/pi;
	lat=vector(12) [pos[0,$1,1][l,tp_col]ABS]; lat=lat[det]; lat_deg=lat*180/pi;
	sun_el=vector(12) [sun_el[$1][l,tp_col]ABS]; sun_el=sun_el[det]; sun_el_deg=sun_el*180/pi;

        pixel_target_distance_rad=
           acos(
              sin(pi/180*target_lat)*sin(lat)
             +(cos(pi/180*target_lat)*cos(lat)*cos(lon-pi/180*target_lon))
           );

        pixel_target_distance_km=
           pixel_target_distance_rad
           *180/pi*1.852*60
           ;

	target_match=pixel_target_distance_rad<=(pi/180/1.852/60)*target_ext;

// fine band registration

	// test code (not used)
	det_test=6;

	Pdelta13=arclen(pos[1,det_test,0][l,tp_col]ABS,pos[1,det_test,1][l,tp_col]ABS,lon,lat);
	Pdelta13_m=Pdelta13*180/pi*1852*60;

	Pdelta12=arclen(pos[1,det_test,0][l,tp_col_max]ABS,pos[1,det_test,1][l,tp_col_max]ABS,pos[1,det_test,0][l,tp_col]ABS,pos[1,det_test,1][l,tp_col]ABS);
	Pdelta12_m=Pdelta12*180/pi*1852*60;

	Pdelta33=arclen(pos[1,det_test,0][l,tp_col]ABS,pos[1,det_test,1][l,tp_col]ABS,pos[1,det_test,0][l-1,tp_col]ABS,pos[1,det_test,1][l-1,tp_col]ABS);
	Pdelta33_m=Pdelta33*180/pi*1852*60;

	Pbearing13=arcbearing(pos[1,det_test,0][l,tp_col]ABS,pos[1,det_test,1][l,tp_col]ABS,lon,lat);
	Pbearing13_deg=Pbearing13*180/pi;

	Pbearing12=arcbearing(pos[1,det_test,0][l,tp_col]ABS,pos[1,det_test,1][l,tp_col]ABS,pos[1,det_test,0][l,tp_col_max]ABS,pos[1,det_test,1][l,tp_col_max]ABS);
	Pbearing12_deg=Pbearing12*180/pi;

	Pdxt=asin(sin(Pdelta13)*sin(Pbearing13-Pbearing12));Pdxt_m=Pdxt*180/pi*1852*60;
	Pdat=((Pbearing13*Pbearing12)>0?1:-1)*acos(cos(Pdelta13)/cos(Pdxt)); Pdat_m=Pdat*180/pi*1852*60;

	Pdat_i=Pdat/Pdelta12*(num_det_pixels_fr-1-tp_col);
	Pdxt_i=Pdxt/Pdelta33;

	Plon1=pos[1,det_test,0][l+Pdxt_i,tp_col+Pdat_i]ABS;
	Plat1=pos[1,det_test,1][l+Pdxt_i,tp_col+Pdat_i]ABS;

	Pdist=arclen(lon,lat,Plon1,Plat1)*180/pi*1852*60;


	// begin fine band coregistration processing
	new_det_line=(canvas_pix@index==0)||(canvas_pix_fr-sampling<det_pix1_canvas_fr[det]);

	dist_b2=vector(num_bands-1,12,2) [arclen(
		pos[$1+1,$2,0][l,$3?tp_col_max:0]ABS,pos[$1+1,$2,1][l,$3?tp_col_max:0]ABS,
		pos[0,$2,0][l,$3?tp_col_max:0]ABS,pos[0,$2,1][l,$3?tp_col_max:0]ABS
	)];

	bearing_b2=vector(num_bands-1,12,2) [arcbearing(
		pos[$1+1,$2,0][l,$3?tp_col_max:0]ABS,pos[$1+1,$2,1][l,$3?tp_col_max:0]ABS,
		pos[0,$2,0][l,$3?tp_col_max:0]ABS,pos[0,$2,1][l,$3?tp_col_max:0]ABS
	)];

	bearing_xt=vector(num_bands-1,12) [arcbearing(
		pos[$1+1,$2,0][l,0]ABS,pos[$1+1,$2,1][l,0]ABS,
		pos[$1+1,$2,0][l,tp_col_max]ABS,pos[$1+1,$2,1][l,tp_col_max]ABS
	)];

	pixel_line_size=vector(num_bands-1,12) [
		arclen(
			pos[$1+1,$2,0][l,tp_col_max/2]ABS,pos[$1+1,$2,1][l,tp_col_max/2]ABS,
			pos[$1+1,$2,0][l-1,tp_col_max/2]ABS,pos[$1+1,$2,1][l-1,tp_col_max/2]ABS
		)
	];

	// coregistration distance (bands x detectors x l/r of swath)
	coreg_coarse_line=vector(num_bands-1,12,2) [
		asin(sin(dist_b2[$1,$2,$3])*sin(bearing_b2[$1,$2,$3]-bearing_xt[$1,$2]))/pixel_line_size[$1,$2]
	];

	dist_b2=vector(num_bands-1,12,2) [arclen(
		pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,$3],$3?tp_col_max:0]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,$3],$3?tp_col_max:0]ABS,
		pos[0,$2,0][l,$3?tp_col_max:0]ABS,pos[0,$2,1][l,$3?tp_col_max:0]ABS
	)];
	dist_b2_m=vector(num_bands-1,12,2) [dist_b2[$1,$2,$3]*180/pi*1852*60];

	bearing_b2=vector(num_bands-1,12,2) [arcbearing(
		pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,$3],$3?tp_col_max:0]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,$3],$3?tp_col_max:0]ABS,
		pos[0,$2,0][l,$3?tp_col_max:0]ABS,pos[0,$2,1][l,$3?tp_col_max:0]ABS
	)];
	bearing_b2_deg=vector(num_bands-1,12,2) [bearing_b2[$1,$2,$3]*180/pi];

	bearing_xt=vector(num_bands-1,12) [keep(arcbearing(
		pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,0],0]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,0],0]ABS,
		pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,1],tp_col_max]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,1],tp_col_max]ABS
	),0)];
	bearing_xt_deg=vector(num_bands-1,12) [bearing_xt[$1,$2]*180/pi];

	pixel_size=vector(num_bands-1,12,2) [
		keep(arclen(
			pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,0],0]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,0],0]ABS,
			pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,0]-1,0]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,0]-1,0]ABS
		),0),
		keep(arclen(
			pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,1],tp_col_max]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,1],tp_col_max]ABS,
			pos[$1+1,$2,0][l+coreg_coarse_line[$1,$2,0],0]ABS,pos[$1+1,$2,1][l+coreg_coarse_line[$1,$2,0],0]ABS
		),0)/(num_det_pixels_fr-1)
	];

	pixel_size_m=vector(num_bands-1,12,2) [pixel_size[$1,$2,$3]*180/pi*1852*60];

	// coregistration distance (bands x detectors x l/r of swath)
	coreg_shift_at=vector(num_bands-1,12,2) [
		asin(sin(dist_b2[$1,$2,$3])*sin(bearing_b2[$1,$2,$3]-bearing_xt[$1,$2]))
	];


	coreg_shift_xt=vector(num_bands-1,12,2) [
		((bearing_xt[$1,$2]-bearing_b2[$1,$2,$3]-pi/2)%(2*pi)>=pi?1:-1)*acos(cos(dist_b2[$1,$2,$3])/cos(coreg_shift_at[$1,$2,$3]))
	];

	coreg_shift_m=vector(num_bands-1,12,2,2) [coreg_shift_at[$1,$2,$3]*180/pi*1852*60,coreg_shift_xt[$1,$2,$3]*180/pi*1852*60];

	coreg_delta_line=vector(num_bands-1,12) [
		 keep((coreg_coarse_line[$1,$2,1]+coreg_shift_at[$1,$2,1]/pixel_size[$1,$2,0])/tp_col_max,!new_det_line||($2!=det))*tp_col
		+keep((coreg_coarse_line[$1,$2,0]+coreg_shift_at[$1,$2,0]/pixel_size[$1,$2,0])/tp_col_max,!new_det_line||($2!=det))*(tp_col_max-tp_col)
	];
	coreg_delta_col=vector(num_bands-1,12) [
		 keep(coreg_shift_xt[$1,$2,1]/pixel_size[$1,$2,1]/tp_col_max,!new_det_line||($2!=det))*tp_col
		+keep(coreg_shift_xt[$1,$2,0]/pixel_size[$1,$2,1]/tp_col_max,!new_det_line||($2!=det))*(tp_col_max-tp_col)
	];

	coreg_pos=vector(num_bands-1,12,2) [pos[$1+1,$2,$3][l+coreg_delta_line[$1,$2],tp_col+coreg_delta_col[$1,$2]]ABS];
	coreg_indices=vector(num_bands-1,2) [l+coreg_delta_line[$1,det],tp_col+coreg_delta_col[$1,det]];
	coreg_pos=vector(num_bands-1,2) [coreg_pos[$1,det,$2]];
	coreg_dist=vector(num_bands-1) [arclen(lon,lat,coreg_pos[$1,0],coreg_pos[$1,1])*180/pi*1852*60];

// detector pixel selection

	scene_line=vector(num_bands) [round(l+data_loffset[$1,det]+($1?coreg_delta_line[$1-1,det]:0))%(16*144/sampling)];

	b2=pixel[0,det]; 
//	b2=vector(12) [pixel[0,$1][0]NEAREST]; b2=b2[det];
	b3=vector(12) [pixel[1,$1][coreg_delta_line[0,$1],coreg_delta_col[0,$1]/sampling]NEAREST]; b3=b3[det];
	b4=vector(12) [pixel[2,$1][coreg_delta_line[1,$1],coreg_delta_col[1,$1]/sampling]NEAREST]; b4=b4[det];


//	mc_bands=vector(MER_RAC_AX.GADS_Corr_Control_Params.0.mc_bands);

//	wt_ob_spa_temp_relax=vector(MER_RAC_AX.GADS_Corr_Control_Params.0.wt_ob_spa_temp_relax);

//	lut_step_b2=mc_bands[1]*16*wt_ob_spa_temp_relax[1];
//	lut_step_b3=mc_bands[2]*16*wt_ob_spa_temp_relax[2];
//	lut_step_b5=mc_bands[4]*16*wt_ob_spa_temp_relax[4];
//	lut_step_b7=mc_bands[6]*16*wt_ob_spa_temp_relax[6];
//	lut_step_smr=mc_bands[15]*16*wt_ob_spa_temp_relax[15];

//	nlin=vector(MER_RAC_AX.ADS_Non_Linearity_LUT_matrix);

//	b2_lut=b2/lut_step_b2;
//	b2_lut_frac=b2-floor(b2_lut)*lut_step_b2;
//	b2_c=
//	   nlin[det,1,floor(b2_lut)]*b2_lut_frac
//	   +nlin[det,1,ceil(b2_lut)]*(lut_step_b2-b2_lut_frac);

//	b3_lut=b3/lut_step_b3;
//	b3_lut_frac=b3-floor(b3_lut)*lut_step_b3;
//	b3_c=
//	   nlin[det,2,floor(b3_lut)]*b3_lut_frac
//	   +nlin[det,2,ceil(b3_lut)]*(lut_step_b3-b3_lut_frac);

//	b5_lut=b5/lut_step_b5;
//	b5_lut_frac=b5-floor(b5_lut)*lut_step_b5;
//	b5_c=
//	   nlin[det,4,floor(b5_lut)]*b5_lut_frac
//	   +nlin[det,4,ceil(b5_lut)]*(lut_step_b5-b5_lut_frac);

//	b7_lut=b7/lut_step_b7;
//	b7_lut_frac=b7-floor(b7_lut)*lut_step_b7;
//	b7_c=
//	   nlin[det,6,floor(b7_lut)]*b7_lut_frac
//	   +nlin[det,6,ceil(b7_lut)]*(lut_step_b7-b7_lut_frac);

//	smr_lut=smr/lut_step_smr;
//	smr_lut_frac=smr-floor(smr_lut)*lut_step_smr;
//	smr_c=
//	   nlin[det,15,floor(smr_lut)]*smr_lut_frac
//	   +nlin[det,15,ceil(smr_lut)]*(lut_step_smr-smr_lut_frac);


//	rac_offset=alias(isfr?"MER_RAC_AX.ADS_Offset_FR_matrix":"MER_RAC_AX.ADS_Offset_RR_matrix");
//	rac_offset_b2=vector(rac_offset[1]);
//	rac_offset_b3=vector(rac_offset[2]);
//	rac_offset_b5=vector(rac_offset[4]);
//	rac_offset_b7=vector(rac_offset[6]);
//	rac_offset_smr=vector(rac_offset[15]);

//	smr=(nlin_corr?smr_c:smr)-rac_offset_smr[det,pix];

//	smr_wt_fac_rr=vector(MER_RAC_AX.GADS_Corr_Control_Params.0.smr_wt_fac_rr);
//	smr_wt_fac_fr=vector(MER_RAC_AX.GADS_Corr_Control_Params.0.smr_wt_fac_fr);

//	smr_b2=smr*(isfr?smr_wt_fac_fr[1,0]:smr_wt_fac_rr[1]);
//	smr_b3=smr*(isfr?smr_wt_fac_fr[2,0]:smr_wt_fac_rr[2]);
//	smr_b5=smr*(isfr?smr_wt_fac_fr[4,0]:smr_wt_fac_rr[4]);
//	smr_b7=smr*(isfr?smr_wt_fac_fr[6,0]:smr_wt_fac_rr[6]);

//	rac_gain=alias(isfr?"MER_RAC_AX.ADS_Gain_FR_matrix":"MER_RAC_AX.ADS_Gain_RR_matrix");
//	rac_gain_b2=vector(rac_gain[1]);
//	rac_gain_b3=vector(rac_gain[2]);
//	rac_gain_b5=vector(rac_gain[4]);
//	rac_gain_b7=vector(rac_gain[6]);

//	scaling_factors=vector(MER_CP1_AX.GADS_Scaling_Factors.0.sf_rad);

//	rad2=
//	   ((nlin_corr?b2_c:b2)-rac_offset_b2[det,pix]-(smr_corr?smr_b2:0))
//	   *rac_gain_b2[det,pix]/scaling_factors[1]
//	;

//	rad3=
//	   ((nlin_corr?b3_c:b3)-rac_offset_b3[det,pix]-(smr_corr?smr_b3:0))
//	   *rac_gain_b3[det,pix]/scaling_factors[2]
//	;

//	rad5=
//	   ((nlin_corr?b5_c:b5)-rac_offset_b5[det,pix]-(smr_corr?smr_b5:0))
//	   *rac_gain_b5[det,pix]/scaling_factors[4]
//	;

//	rad7=
//	   ((nlin_corr?b7_c:b7)-rac_offset_b7[det,pix]-(smr_corr?smr_b7:0))
//	   *rac_gain_b7[det,pix]/scaling_factors[6]
//	;

	

	rad2=b2;
	rad3=b3;
	rad4=b4;

	sun_factor=sin(sun_el);
	refl2=rad2/sun_factor;
	refl3=rad3/sun_factor;
	refl4=rad4/sun_factor;
	

	// composite RGB with R=b2, G=b3 B=b4
	red=refl4;
	green=refl3;
	blue=refl2;

	red=	(red<=.163
			?(0 + ((red - 0) / (.163 - 0)) * (144 - 0))
			:(red<=.419
				?(144 + ((red - .163) / (.419 - .163)) * (222 - 144))
				:(222 + ((red - .419) / (1 - .419)) * (255 - 222))
			)
		)/255;

	green=	(green<=.144
			?(0 + ((green - 0) / (.144 - 0)) * (155 - 0))
			:(green<=.359
				?(155 + ((green - .144) / (.359 - .144)) * (203 - 155))
				:(203 + ((green - .359) / (1 - .359)) * (255 - 203))
			)
		)/255;

	blue=	(blue<=.222
			?(0 + ((blue - 0) / (.222 - 0)) * (162 - 0))
			:(blue<=.600
				?(162 + ((blue - .222) / (.600 - .222)) * (244 - 162))
				:(244 + ((blue - .600) / (1 - .600)) * (255 - 244))
			)
		)/255;


	red=refl4;
	green=refl3;
	blue=refl2;

//	red=rad4;
//	green=rad3;
//	blue=rad2;

	red=isnan(b4)?0:red;
	green=isnan(b3)?0:green;
	blue=isnan(b2)?0:blue;
	nodata=isnan(b2)&&isnan(b3)&&isnan(b4);

	// compose R/G/B channels

	rgb=color(min(red,1),min(green,1),min(blue,1),!nodata);

	// saturate
	// rgb=rgb@S((rgb S)*1.4);



// Output

	// aggregate valid pixels in browse raster, let invalid be cropped out
	invalid=0;
	browse=rastermap(rgb,(dont_target||target_match)&&!invalid) @geo(lines_per_tp,pixels_per_tp/sampling,lon_deg,lat_deg);

	outname=option("outname",filename)<<(dont_target?"":"."<<target_name);
	bp=dont_target?browse @name(outname):browse @name(outname)@autocrop;

	warp_areas=vector(12) [floor((det_pix1_canvas_fr[$1]+sampling/2-0.5)/sampling)-canvas_pix@first] ;
	warp_areas=vector(12) [(warp_areas[$1]<0)&&(warp_areas[min($1+1,11)]<=0)?nan:max(warp_areas[$1],0)] ;

	warp_file=asciilog()
	   header
	   ["areas=:"
	      <<(isnan(warp_areas[1])?"":(warp_areas[1]<<":"))
	      <<(isnan(warp_areas[2])?"":(warp_areas[2]<<":"))
	      <<(isnan(warp_areas[3])?"":(warp_areas[3]<<":"))
	      <<(isnan(warp_areas[4])?"":(warp_areas[4]<<":"))
	      <<(isnan(warp_areas[5])?"":(warp_areas[5]<<":"))
	      <<(isnan(warp_areas[6])?"":(warp_areas[6]<<":"))
	      <<(isnan(warp_areas[7])?"":(warp_areas[7]<<":"))
	      <<(isnan(warp_areas[8])?"":(warp_areas[8]<<":"))
	      <<(isnan(warp_areas[9])?"":(warp_areas[9]<<":"))
	      <<(isnan(warp_areas[10])?"":(warp_areas[10]<<":"))
	      <<(isnan(warp_areas[11])?"":(warp_areas[11]))
	   ]
	;

	// actual start/stop times of the lines extracted for reference in metadata
	meta_file=asciilog()
	   header
	   footer
	   ['<image name="'<<outname<<'">']endl
	   ['\t<sensing_data mission="SENTINEL-2" sensor="MSI">']endl
	   ['\t\t<datastrip satellite_unit="'<<sat_unit<<'">']endl
	   ['\t\t\t<datatake id="'<<datatake<<'">']endl
	   ['\t\t\t\t<orbit>'<<orbit<<'</orbit>']endl
	   ['\t\t\t\t<start_time unit="UTC">'<<datestr(datenum(datatake[4]))ISO[0,18]<<'</start_time>']endl
	   ['\t\t\t\t<msi_mode nuc_id="'<<nuc_table_id<<'">'<<msi_mode<<'</msi_mode>']endl
	   ['\t\t\t</datatake>']endl
	   ['\t\t\t<downlink>'<<downlink<<'</downlink>']endl
	   ['\t\t\t<first_scene unit="UTC">'<<datestr(LINE_TIME[tpdf*num_margin_scenes],2000)ISO<<'</first_scene>']endl
	   ['\t\t\t<last_scene unit="UTC">'<<datestr(LINE_TIME[tpdf*(num_margin_scenes+num_scenes)],2000)ISO<<'</last_scene>']endl
	   ['\t\t</datastrip>']endl
	   ['\t\t<sensing_segment>']endl
	   ['\t\t\t<sensing_start unit="UTC">'<<sensing_start_str<<'</sensing_start>']endl
	   ['\t\t\t<sensing_stop unit="UTC">'<<line_sensing_time_str<<'</sensing_stop>']endl
	   ['\t\t\t<num_lines>'<<l@dim<<'</num_lines>']endl
	   ['\t\t</sensing_segment>']endl
	   ['\t</sensing_data>']endl
	   ['\t<processing_data>']endl
	   ['\t\t<image_processor name="'<<proc<<'" version="'<<proc_version<<'">']endl
	   ['\t\t\t<processing_time>'<<proc_time<<'</processing_time>']endl
	   ['\t\t\t<processing_parameters>']endl
	   ['\t\t\t\t<sensing_start'<<(sensing_start_param==""?'/>':(' unit="UTC">'<<sensing_start_param<<'</sensing_start>'))]endl
	   ['\t\t\t\t<sensing_stop'<<(sensing_stop_param==""?'/>':(' unit="UTC">'<<sensing_stop_param<<'</sensing_stop>'))]endl
	   ['\t\t\t\t<target/>',dont_target]endl
	   ['\t\t\t\t<target name="'<<target_name<<'">',!dont_target]endl
	   ['\t\t\t\t\t<longitude unit="deg">'<<target_lon<<'</longitude>',!dont_target]endl
	   ['\t\t\t\t\t<latitude unit="deg">'<<target_lat<<'</latitude>',!dont_target]endl
	   ['\t\t\t\t\t<extents unit="km">'<<target_ext<<'</extents>',!dont_target]endl
	   ['\t\t\t\t</target>',!dont_target]endl
	   ['\t\t\t\t<det_overlap>'<<(det_overlap?'FULL':'REMOVE')<<'</det_overlap>']endl
	   ['\t\t\t\t<viewing_directions>'<<words(VIEWDIR.BAND_VIEWDIR@FILENAME,".",0)<<'</viewing_directions>']endl
	   ['\t\t\t</processing_parameters>']endl
	   ['\t\t</image_processor>']endl
	   ['\t</processing_data>']endl
	   ['</image>']endl
	;

// Output Condition:

	bp==0?(warp_file@name(outname<<".warp")+meta_file@name(outname<<".xml")):1

